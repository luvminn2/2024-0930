# 클래스 / 문서화

<aside>

**지난시간 복습))**

**클래스의 구조))**
method = function 함수들=self
생성자=변수들을 담는거(생성자에도 self적기)
인자 및 매개변수 적는 곳  def (self, a,b) a:*튜플(주소1개)    b:**(안쪽 인자까지 주소2개)

**추가과제))**
1.문서화 시키기
   class문서화꼭시키는 이유는 협업,   문서화란 코드설명이다.
  ex) 첫번째 주석에다 간단한 함수설명
  def      #a의 역할
 
**문서화에 들어가야 될것)) document →깃허브에 올릴때**
     1.흐름,
     2.사용법
 예) Class calc
        def plus 
       Class (calc)
        def plus
          multiple+ 3
**document(문서화) →깃허브에 올릴때 주의할것))**
    readme.md(markdown표시ex노션이 마크다운언어) ↔ (markup)
    markdown markup
    ***제목1 ****(제목1)이렇게 크게 적힌다.
    **down 과 up의 차이))**
   down은 문서표시 readme
   up은 html 
     * * 코드 파이썬 *  *
  
  **문서화 하는법))남들이 알아보기 쉽게 쓰기!!(복잡한데 간결하다)**
   1.목적 
   2.역할
   3.**실행방법**
      환경:(conda, docker,
      어떤 언어인가??(python java)
      실행순서 
      ***구조화***   model(A.model .py ,B.model.py)
          **예)딥러닝이면 (dataset, model, [train.py](http://train.py)   [eval](http://evaluation.py).py [predic.py](http://predic.py)   [test.py](http://test.py) , eny.yaml, docker
       , 유 틸즈,losses.py )**
      이런식으로 파일 제목 짓기랑 구조화 짓기를 잘해야 됨.
       ./:는 현재나의 폴더,    : 상위 폴더  
    
     장점 )유지보수가 쉽고, 관리가 쉽다.
         만약 모델 c를 바꾸고 싶으면 모델c를 불러오면 된다.
         losses도 그렇다. 
        **프론트엔드는 유지 보수가 어렵다.

**(.)의 역할 2가지))**
   shell에서 현재 폴더라는 뜻
   [shell.sh](http://shell.sh) 
   리눅스 bash shell.sh
   .shell.sh도 실행
   .  ./shell.sl(내폴더에서 내파일을 실행시켜라)
   .적지말고 bash로 고쳐서 적기
   .Anaconda(bash anaconda)
   .  .   .(bash  내폴더  docker)
  —>되도록이면 상대경로 말고 절대경로쓰기
    **상대경로**를 꼭써야 될때(터미널이 있어야 내 위치를 알 수 있음.내 위치 기준,,내 위치앞이

    달라지는 경우 예를 들어 배포할때는 상대경로를 적어주기) 

     **절대경로**는(내 위치랑 상관없음,백그라운드에서 돌아갈때 써야함. 시스템 단에서 할때, 

     터미널뒤에서 돌아갈때 )
    

**Shell에서 점(`.`)은 주로 다음과 같은 두 가지 역할을 합니다:(너무 헷갈리니까 bash**

### 1. **현재 디렉토리 표시**

- 점 하나(`.`)는 현재 작업 중인 디렉토리를 나타냅니다. 예를 들어, 파일이나 디렉토리 경로에서 점을 사용하여 현재 디렉토리에 있는 파일에 접근할 수 있습니다.
- **예시**:
    
    ```bash
    bash
    코드 복사
    ls .  # 현재 디렉토리의 파일 및 폴더 목록을 나열
    
    ```
    

### 2. **명령 실행**

- 점 두 개(`..`)는 부모 디렉토리를 나타냅니다. 이는 현재 디렉토리의 상위 디렉토리를 참조하는 데 사용됩니다.
- **예시**:
    
    ```bash
    bash
    코드 복사
    cd ..  # 부모 디렉토리로 이동
    
    ```
    

### 3. **스크립트 실행**

- 점과 공백(`.` ) 또는 `source` 명령어는 스크립트 파일을 현재 셸에서 실행하는 데 사용됩니다. 이는 스크립트 내의 변수나 함수가 현재 셸 환경에서 유지되도록 합니다.
- **예시**:
    
    ```bash
    bash
    코드 복사
    . script.sh  # script.sh를 현재 셸에서 실행
    
    ```
    
- 또는:
    
    ```bash
    bash
    코드 복사
    source script.sh  # script.sh를 현재 셸에서 실행
    
    ```
    

### 요약

- **`.`**: 현재 디렉토리
- **`..`**: 부모 디렉토리
- **`. script.sh` 또는 `source script.sh`**: 스크립트를 현재 셸 환경에서 실행

이와 같이, 점은 디렉토리 참조와 스크립트 실행 등 여러 용도로 사용됩니다.

4o mini

</aside>

<aside>

**※빌드/컴파일/인스토어**
  **build**-하나의 파일로 만들기 (**운영체제에 받게 코드를 변경**)
  환경에 맞게 코드변경  **(setup.py(build의 라이브러리)**
  **compile**- compile
  **install-**원하는 위치 넣고 환경변수 설치(**옮기고 환경변수)**
 
**예를들어))** 
  compiler gcc.12
                  gcc 11
 if gcc=12
  compile 12

 elif gcc =11
   compile 11
else install         
—→ **이게 바로 build이다.(setup.py(build의 라이브러리)(환경에 맞게코드고르는것)(환경이 없으면 환경을 새로 사면됨.)**

—>github에서 어떤 자료를 다운 받을때 버전이 다른게 많음—>이때 build를 이용함. 
****

</aside>

<aside>

**chat gpt한테 물어본 빌드, 컴파일, 인스토어**

당신이 언급한 내용은 소프트웨어를 빌드하고 설치하는 과정에 대한 일반적인 단계를 설명하고 있습니다. 이 과정은 보통 소프트웨어 개발 및 배포에 사용됩니다. 각 단계에 대해 자세히 설명하겠습니다.

### 1. Build - 하나의 파일로 만들기

- **Build** 단계는 소스 코드를 실행 가능한 바이너리 파일 또는 패키지로 변환하는 과정입니다.
- 이 과정에서 컴파일러가 소스 코드를 분석하여 최적화된 기계어 코드로 변환합니다.
- 예를 들어, C 언어로 작성된 소스 코드를 컴파일하여 실행 파일을 생성하는 것이 포함됩니다.

### 2. 환경에 맞게 코드 변경

- 소프트웨어가 실행될 운영 체제나 환경에 맞게 코드를 수정하는 단계입니다.
- 이 단계에서는 특정 라이브러리나 API 호출을 운영 체제에 맞게 조정하는 작업이 필요할 수 있습니다.
- 예를 들어, Windows와 Linux의 파일 경로 구문이 다르기 때문에 이를 고려하여 코드를 수정해야 할 수 있습니다.

### 3. Compile

- **Compile**은 소스 코드를 컴파일하여 실행 가능한 프로그램으로 변환하는 과정입니다.
- 이 과정에서는 컴파일러가 코드를 읽고, 구문 분석을 하며, 중간 코드를 생성한 후, 최종적으로 실행 파일을 생성합니다.
- 예를 들어, `gcc` 명령어를 사용하여 C 프로그램을 컴파일할 수 있습니다:
    
    ```bash
    bash
    코드 복사
    gcc -o myprogram myprogram.c
    
    ```
    

### 4. Install - 원하는 위치에 넣고 환경변수 설치

- **Install** 단계는 빌드된 프로그램을 사용자가 지정한 위치에 설치하고, 필요하다면 환경 변수를 설정하는 과정입니다.
- 이 과정에서는 일반적으로 실행 파일을 `/usr/local/bin`과 같은 시스템의 PATH에 포함된 디렉토리에 복사합니다.
- 또한, 프로그램의 환경 변수를 설정하여, 시스템이 프로그램을 올바르게 인식하고 사용할 수 있도록 합니다. 예를 들어:
    
    ```bash
    bash
    코드 복사
    export PATH=$PATH:/usr/local/myprogram/bin
    
    ```
    

### 요약

- **Build**: 소스 코드를 바이너리 파일로 변환.
- **환경에 맞게 코드 변경**: 특정 운영 체제나 환경에 맞춰 코드 수정.
- **Compile**: 소스 코드를 실행 가능한 프로그램으로 변환.
- **Install**: 빌드된 프로그램을 지정한 위치에 설치하고, 필요한 환경 변수를 설정.

이 단계들은 일반적으로 소프트웨어 개발 주기에서 중요한 부분이며, 프로그램을 배포하기 위해 필요한 작업입니다.

</aside>
